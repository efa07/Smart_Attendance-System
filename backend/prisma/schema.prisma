generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  fullName       String
  email          String        @unique
  password       String
  role           String
  department     String?
  profilePic     String?
  createdAt      DateTime      @default(now())
  attendance     Attendance[]
  faceEncoding   FaceEncoding? 
  shifts         Shift[] 
  leaves         Leave[]
  isAdmin        Boolean       @default(false)
  notifications  Notification[]
  fingerprintId  String?       
  rfidId         String?  
  payroll        Payroll[]
}

model Attendance {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  checkIn        DateTime?
  checkOut       DateTime?
  status         String?
  clockOutStatus String? 
  recognizedFace Boolean  @default(false)
  overtime       Int?     @default(0)
  fingerprintId  String?  
  rfidId         String? 
  createdAt      DateTime @default(now())
  shift          String?
}

model FaceEncoding {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id],onDelete: Cascade) 
  userId    Int @unique
  encoding  Bytes
  createdAt DateTime @default(now())
}

model Shift {
  id         Int        @id @default(autoincrement())
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId     Int  
  shiftType  String?
  shiftStart DateTime
  shiftEnd   DateTime
}

model Leave {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    Int
  leaveType String
  startDate DateTime
  endDate   DateTime
  status    String
  department String
  createdAt DateTime @default(now())
}

model Notification {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    Int
  message   String
  status    String
  createdAt DateTime @default(now())
}

model Payroll {
  id         String   @id @default(uuid()) 
  userId     Int      @unique 
  fullName   String
  email      String
  baseSalary Float
  finalSalary Float
  status     String 
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
